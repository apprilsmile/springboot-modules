server.port=8088

###########【Kafka集群配置】###########，注意这种属性用.拼接的写法中间不能有空行
spring.kafka.bootstrap-servers: 10.20.6.190:9092,10.20.6.191:9092,10.20.6.192:9092
###########【生产者配置】
#ID在发出请求时传递给服务器，用于服务器端日志记录
#spring.kafka.producer.client-id: demo-web
# 消息消费失败重试次数
spring.kafka.producer.retries: 0
# 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
spring.kafka.producer.acks: all
# 批量推送消息数，默认值为16384。每当多个记录被发送到同一分区时，生产者将尝试将记录一起批量处理为更少的请求，
spring.kafka.producer.batch-size: 16384
# 提交延时
# linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size就会失效
# 当生产端积累的消息达到batch-size或接收到消息linger.ms毫秒后,生产者就会将消息提交给kafka
spring.kafka.producer.properties.linger.ms: 1
# 生产者可用于缓冲等待发送到服务器的记录的内存总字节数，默认值为33554432
spring.kafka.producer.buffer-memory: 33554432
# Kafka提供的序列化和反序列化类
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer: com.appril.util.JsonSerializer
#spring.kafka.producer.value-serializer: rc.riskctrl.util.KafkaMessageSerializer
# 自定义分区器
# spring.kafka.producer.properties.partitioner.class: com.felix.kafka.producer.CustomizePartitioner
###########【消费者配置】
# 默认的消费组ID
#spring.kafka.consumer.properties.group.id: defaultConsumerGroup
spring.kafka.consumer.properties.group.id: mygroup
# 是否自动提交，当配置为true时，每次获取到消息后就会自动更新存储在zookepper中的offset值
spring.kafka.consumer.enable-auto-commit: true
# 提交offset延时(接收到消息后多久提交offset)
spring.kafka.consumer.auto.commit.interval.ms: 1000
# 当kafka中没有初始offset或offset超出范围时将自动重置offset
# earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
# latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
# none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
spring.kafka.consumer.auto-offset-reset: earliest
# 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
spring.kafka.consumer.properties.session.timeout.ms: 120000
# 消费请求超时时间
spring.kafka.consumer.properties.request.timeout.ms: 180000
# Kafka提供的序列化和反序列化类
spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer: com.appril.util.JsonDeserializer
# 消费端监听的topic不存在时，项目启动会报错(关掉)
spring.kafka.listener.missing-topics-fatal: false


